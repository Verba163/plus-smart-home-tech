// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry/messages/hub_event.proto

package ru.yandex.practicum.grpc.telemetry.event;

/**
 * <pre>
 * события (де)регистрации устройств
 * </pre>
 *
 * Protobuf enum {@code telemetry.message.event.DeviceTypeProto}
 */
public enum DeviceTypeProto
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * датчик движения
   * </pre>
   *
   * <code>MOTION_SENSOR = 0;</code>
   */
  MOTION_SENSOR(0),
  /**
   * <pre>
   * датчик температуры
   * </pre>
   *
   * <code>TEMPERATURE_SENSOR = 1;</code>
   */
  TEMPERATURE_SENSOR(1),
  /**
   * <pre>
   * датчик освещённости
   * </pre>
   *
   * <code>LIGHT_SENSOR = 2;</code>
   */
  LIGHT_SENSOR(2),
  /**
   * <pre>
   * датчик контроля климата
   * </pre>
   *
   * <code>CLIMATE_SENSOR = 3;</code>
   */
  CLIMATE_SENSOR(3),
  /**
   * <pre>
   * переключатель
   * </pre>
   *
   * <code>SWITCH_SENSOR = 4;</code>
   */
  SWITCH_SENSOR(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * датчик движения
   * </pre>
   *
   * <code>MOTION_SENSOR = 0;</code>
   */
  public static final int MOTION_SENSOR_VALUE = 0;
  /**
   * <pre>
   * датчик температуры
   * </pre>
   *
   * <code>TEMPERATURE_SENSOR = 1;</code>
   */
  public static final int TEMPERATURE_SENSOR_VALUE = 1;
  /**
   * <pre>
   * датчик освещённости
   * </pre>
   *
   * <code>LIGHT_SENSOR = 2;</code>
   */
  public static final int LIGHT_SENSOR_VALUE = 2;
  /**
   * <pre>
   * датчик контроля климата
   * </pre>
   *
   * <code>CLIMATE_SENSOR = 3;</code>
   */
  public static final int CLIMATE_SENSOR_VALUE = 3;
  /**
   * <pre>
   * переключатель
   * </pre>
   *
   * <code>SWITCH_SENSOR = 4;</code>
   */
  public static final int SWITCH_SENSOR_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static DeviceTypeProto valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static DeviceTypeProto forNumber(int value) {
    switch (value) {
      case 0: return MOTION_SENSOR;
      case 1: return TEMPERATURE_SENSOR;
      case 2: return LIGHT_SENSOR;
      case 3: return CLIMATE_SENSOR;
      case 4: return SWITCH_SENSOR;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<DeviceTypeProto>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      DeviceTypeProto> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<DeviceTypeProto>() {
          public DeviceTypeProto findValueByNumber(int number) {
            return DeviceTypeProto.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return ru.yandex.practicum.grpc.telemetry.event.HubEvent.getDescriptor().getEnumTypes().get(0);
  }

  private static final DeviceTypeProto[] VALUES = values();

  public static DeviceTypeProto valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private DeviceTypeProto(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:telemetry.message.event.DeviceTypeProto)
}

