/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ru.yandex.practicum.kafka.telemetry.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ScenarioAddedEventAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8682827049331927594L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ScenarioAddedEventAvro\",\"namespace\":\"ru.yandex.practicum.kafka.telemetry.event\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"conditions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ScenarioConditionAvro\",\"fields\":[{\"name\":\"sensor_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ConditionTypeAvro\",\"symbols\":[\"MOTION\",\"LUMINOSITY\",\"SWITCH\",\"TEMPERATURE\",\"CO2LEVEL\",\"HUMIDITY\"]}},{\"name\":\"operation\",\"type\":{\"type\":\"enum\",\"name\":\"ConditionOperationAvro\",\"symbols\":[\"EQUALS\",\"GREATER_THAN\",\"LOWER_THAN\"]}},{\"name\":\"value\",\"type\":[\"null\",\"int\",\"boolean\"],\"default\":null}]}}},{\"name\":\"actions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"DeviceActionAvro\",\"fields\":[{\"name\":\"sensor_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ActionTypeAvro\",\"symbols\":[\"ACTIVATE\",\"DEACTIVATE\",\"INVERSE\",\"SET_VALUE\"]}},{\"name\":\"value\",\"type\":[\"null\",\"int\"],\"default\":null}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ScenarioAddedEventAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ScenarioAddedEventAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ScenarioAddedEventAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ScenarioAddedEventAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ScenarioAddedEventAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ScenarioAddedEventAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ScenarioAddedEventAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ScenarioAddedEventAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ScenarioAddedEventAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String name;
  private java.util.List<ru.yandex.practicum.kafka.telemetry.event.ScenarioConditionAvro> conditions;
  private java.util.List<ru.yandex.practicum.kafka.telemetry.event.DeviceActionAvro> actions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ScenarioAddedEventAvro() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param conditions The new value for conditions
   * @param actions The new value for actions
   */
  public ScenarioAddedEventAvro(java.lang.String name, java.util.List<ru.yandex.practicum.kafka.telemetry.event.ScenarioConditionAvro> conditions, java.util.List<ru.yandex.practicum.kafka.telemetry.event.DeviceActionAvro> actions) {
    this.name = name;
    this.conditions = conditions;
    this.actions = actions;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return conditions;
    case 2: return actions;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = value$ != null ? value$.toString() : null; break;
    case 1: conditions = (java.util.List<ru.yandex.practicum.kafka.telemetry.event.ScenarioConditionAvro>)value$; break;
    case 2: actions = (java.util.List<ru.yandex.practicum.kafka.telemetry.event.DeviceActionAvro>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'conditions' field.
   * @return The value of the 'conditions' field.
   */
  public java.util.List<ru.yandex.practicum.kafka.telemetry.event.ScenarioConditionAvro> getConditions() {
    return conditions;
  }


  /**
   * Sets the value of the 'conditions' field.
   * @param value the value to set.
   */
  public void setConditions(java.util.List<ru.yandex.practicum.kafka.telemetry.event.ScenarioConditionAvro> value) {
    this.conditions = value;
  }

  /**
   * Gets the value of the 'actions' field.
   * @return The value of the 'actions' field.
   */
  public java.util.List<ru.yandex.practicum.kafka.telemetry.event.DeviceActionAvro> getActions() {
    return actions;
  }


  /**
   * Sets the value of the 'actions' field.
   * @param value the value to set.
   */
  public void setActions(java.util.List<ru.yandex.practicum.kafka.telemetry.event.DeviceActionAvro> value) {
    this.actions = value;
  }

  /**
   * Creates a new ScenarioAddedEventAvro RecordBuilder.
   * @return A new ScenarioAddedEventAvro RecordBuilder
   */
  public static ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder newBuilder() {
    return new ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder();
  }

  /**
   * Creates a new ScenarioAddedEventAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ScenarioAddedEventAvro RecordBuilder
   */
  public static ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder newBuilder(ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder other) {
    if (other == null) {
      return new ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder();
    } else {
      return new ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder(other);
    }
  }

  /**
   * Creates a new ScenarioAddedEventAvro RecordBuilder by copying an existing ScenarioAddedEventAvro instance.
   * @param other The existing instance to copy.
   * @return A new ScenarioAddedEventAvro RecordBuilder
   */
  public static ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder newBuilder(ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro other) {
    if (other == null) {
      return new ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder();
    } else {
      return new ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for ScenarioAddedEventAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ScenarioAddedEventAvro>
    implements org.apache.avro.data.RecordBuilder<ScenarioAddedEventAvro> {

    private java.lang.String name;
    private java.util.List<ru.yandex.practicum.kafka.telemetry.event.ScenarioConditionAvro> conditions;
    private java.util.List<ru.yandex.practicum.kafka.telemetry.event.DeviceActionAvro> actions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.conditions)) {
        this.conditions = data().deepCopy(fields()[1].schema(), other.conditions);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.actions)) {
        this.actions = data().deepCopy(fields()[2].schema(), other.actions);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing ScenarioAddedEventAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.conditions)) {
        this.conditions = data().deepCopy(fields()[1].schema(), other.conditions);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.actions)) {
        this.actions = data().deepCopy(fields()[2].schema(), other.actions);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'conditions' field.
      * @return The value.
      */
    public java.util.List<ru.yandex.practicum.kafka.telemetry.event.ScenarioConditionAvro> getConditions() {
      return conditions;
    }


    /**
      * Sets the value of the 'conditions' field.
      * @param value The value of 'conditions'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder setConditions(java.util.List<ru.yandex.practicum.kafka.telemetry.event.ScenarioConditionAvro> value) {
      validate(fields()[1], value);
      this.conditions = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'conditions' field has been set.
      * @return True if the 'conditions' field has been set, false otherwise.
      */
    public boolean hasConditions() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'conditions' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder clearConditions() {
      conditions = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'actions' field.
      * @return The value.
      */
    public java.util.List<ru.yandex.practicum.kafka.telemetry.event.DeviceActionAvro> getActions() {
      return actions;
    }


    /**
      * Sets the value of the 'actions' field.
      * @param value The value of 'actions'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder setActions(java.util.List<ru.yandex.practicum.kafka.telemetry.event.DeviceActionAvro> value) {
      validate(fields()[2], value);
      this.actions = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'actions' field has been set.
      * @return True if the 'actions' field has been set, false otherwise.
      */
    public boolean hasActions() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'actions' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.ScenarioAddedEventAvro.Builder clearActions() {
      actions = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ScenarioAddedEventAvro build() {
      try {
        ScenarioAddedEventAvro record = new ScenarioAddedEventAvro();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.conditions = fieldSetFlags()[1] ? this.conditions : (java.util.List<ru.yandex.practicum.kafka.telemetry.event.ScenarioConditionAvro>) defaultValue(fields()[1]);
        record.actions = fieldSetFlags()[2] ? this.actions : (java.util.List<ru.yandex.practicum.kafka.telemetry.event.DeviceActionAvro>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ScenarioAddedEventAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<ScenarioAddedEventAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ScenarioAddedEventAvro>
    READER$ = (org.apache.avro.io.DatumReader<ScenarioAddedEventAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










