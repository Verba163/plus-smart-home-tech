/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ru.yandex.practicum.kafka.telemetry.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ClimateSensorAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5562416267827788951L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClimateSensorAvro\",\"namespace\":\"ru.yandex.practicum.kafka.telemetry.event\",\"fields\":[{\"name\":\"temperature_c\",\"type\":\"int\"},{\"name\":\"humidity\",\"type\":\"int\"},{\"name\":\"co2_level\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ClimateSensorAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClimateSensorAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ClimateSensorAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ClimateSensorAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ClimateSensorAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ClimateSensorAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ClimateSensorAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ClimateSensorAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ClimateSensorAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int temperature_c;
  private int humidity;
  private int co2_level;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClimateSensorAvro() {}

  /**
   * All-args constructor.
   * @param temperature_c The new value for temperature_c
   * @param humidity The new value for humidity
   * @param co2_level The new value for co2_level
   */
  public ClimateSensorAvro(java.lang.Integer temperature_c, java.lang.Integer humidity, java.lang.Integer co2_level) {
    this.temperature_c = temperature_c;
    this.humidity = humidity;
    this.co2_level = co2_level;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return temperature_c;
    case 1: return humidity;
    case 2: return co2_level;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: temperature_c = (java.lang.Integer)value$; break;
    case 1: humidity = (java.lang.Integer)value$; break;
    case 2: co2_level = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'temperature_c' field.
   * @return The value of the 'temperature_c' field.
   */
  public int getTemperatureC() {
    return temperature_c;
  }


  /**
   * Sets the value of the 'temperature_c' field.
   * @param value the value to set.
   */
  public void setTemperatureC(int value) {
    this.temperature_c = value;
  }

  /**
   * Gets the value of the 'humidity' field.
   * @return The value of the 'humidity' field.
   */
  public int getHumidity() {
    return humidity;
  }


  /**
   * Sets the value of the 'humidity' field.
   * @param value the value to set.
   */
  public void setHumidity(int value) {
    this.humidity = value;
  }

  /**
   * Gets the value of the 'co2_level' field.
   * @return The value of the 'co2_level' field.
   */
  public int getCo2Level() {
    return co2_level;
  }


  /**
   * Sets the value of the 'co2_level' field.
   * @param value the value to set.
   */
  public void setCo2Level(int value) {
    this.co2_level = value;
  }

  /**
   * Creates a new ClimateSensorAvro RecordBuilder.
   * @return A new ClimateSensorAvro RecordBuilder
   */
  public static ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder newBuilder() {
    return new ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder();
  }

  /**
   * Creates a new ClimateSensorAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClimateSensorAvro RecordBuilder
   */
  public static ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder newBuilder(ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder other) {
    if (other == null) {
      return new ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder();
    } else {
      return new ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder(other);
    }
  }

  /**
   * Creates a new ClimateSensorAvro RecordBuilder by copying an existing ClimateSensorAvro instance.
   * @param other The existing instance to copy.
   * @return A new ClimateSensorAvro RecordBuilder
   */
  public static ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder newBuilder(ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro other) {
    if (other == null) {
      return new ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder();
    } else {
      return new ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for ClimateSensorAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClimateSensorAvro>
    implements org.apache.avro.data.RecordBuilder<ClimateSensorAvro> {

    private int temperature_c;
    private int humidity;
    private int co2_level;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.temperature_c)) {
        this.temperature_c = data().deepCopy(fields()[0].schema(), other.temperature_c);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.humidity)) {
        this.humidity = data().deepCopy(fields()[1].schema(), other.humidity);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.co2_level)) {
        this.co2_level = data().deepCopy(fields()[2].schema(), other.co2_level);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing ClimateSensorAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.temperature_c)) {
        this.temperature_c = data().deepCopy(fields()[0].schema(), other.temperature_c);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.humidity)) {
        this.humidity = data().deepCopy(fields()[1].schema(), other.humidity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.co2_level)) {
        this.co2_level = data().deepCopy(fields()[2].schema(), other.co2_level);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'temperature_c' field.
      * @return The value.
      */
    public int getTemperatureC() {
      return temperature_c;
    }


    /**
      * Sets the value of the 'temperature_c' field.
      * @param value The value of 'temperature_c'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder setTemperatureC(int value) {
      validate(fields()[0], value);
      this.temperature_c = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature_c' field has been set.
      * @return True if the 'temperature_c' field has been set, false otherwise.
      */
    public boolean hasTemperatureC() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'temperature_c' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder clearTemperatureC() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'humidity' field.
      * @return The value.
      */
    public int getHumidity() {
      return humidity;
    }


    /**
      * Sets the value of the 'humidity' field.
      * @param value The value of 'humidity'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder setHumidity(int value) {
      validate(fields()[1], value);
      this.humidity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'humidity' field has been set.
      * @return True if the 'humidity' field has been set, false otherwise.
      */
    public boolean hasHumidity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'humidity' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder clearHumidity() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'co2_level' field.
      * @return The value.
      */
    public int getCo2Level() {
      return co2_level;
    }


    /**
      * Sets the value of the 'co2_level' field.
      * @param value The value of 'co2_level'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder setCo2Level(int value) {
      validate(fields()[2], value);
      this.co2_level = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'co2_level' field has been set.
      * @return True if the 'co2_level' field has been set, false otherwise.
      */
    public boolean hasCo2Level() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'co2_level' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.ClimateSensorAvro.Builder clearCo2Level() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClimateSensorAvro build() {
      try {
        ClimateSensorAvro record = new ClimateSensorAvro();
        record.temperature_c = fieldSetFlags()[0] ? this.temperature_c : (java.lang.Integer) defaultValue(fields()[0]);
        record.humidity = fieldSetFlags()[1] ? this.humidity : (java.lang.Integer) defaultValue(fields()[1]);
        record.co2_level = fieldSetFlags()[2] ? this.co2_level : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClimateSensorAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClimateSensorAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClimateSensorAvro>
    READER$ = (org.apache.avro.io.DatumReader<ClimateSensorAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.temperature_c);

    out.writeInt(this.humidity);

    out.writeInt(this.co2_level);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.temperature_c = in.readInt();

      this.humidity = in.readInt();

      this.co2_level = in.readInt();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.temperature_c = in.readInt();
          break;

        case 1:
          this.humidity = in.readInt();
          break;

        case 2:
          this.co2_level = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










