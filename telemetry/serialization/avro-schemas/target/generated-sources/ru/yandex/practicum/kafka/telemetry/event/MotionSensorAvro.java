/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ru.yandex.practicum.kafka.telemetry.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MotionSensorAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 791239117724168143L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MotionSensorAvro\",\"namespace\":\"ru.yandex.practicum.kafka.telemetry.event\",\"fields\":[{\"name\":\"link_quality\",\"type\":\"int\"},{\"name\":\"motion\",\"type\":\"boolean\"},{\"name\":\"voltage\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MotionSensorAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MotionSensorAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MotionSensorAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MotionSensorAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MotionSensorAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MotionSensorAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MotionSensorAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MotionSensorAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MotionSensorAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int link_quality;
  private boolean motion;
  private int voltage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MotionSensorAvro() {}

  /**
   * All-args constructor.
   * @param link_quality The new value for link_quality
   * @param motion The new value for motion
   * @param voltage The new value for voltage
   */
  public MotionSensorAvro(java.lang.Integer link_quality, java.lang.Boolean motion, java.lang.Integer voltage) {
    this.link_quality = link_quality;
    this.motion = motion;
    this.voltage = voltage;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return link_quality;
    case 1: return motion;
    case 2: return voltage;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: link_quality = (java.lang.Integer)value$; break;
    case 1: motion = (java.lang.Boolean)value$; break;
    case 2: voltage = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'link_quality' field.
   * @return The value of the 'link_quality' field.
   */
  public int getLinkQuality() {
    return link_quality;
  }


  /**
   * Sets the value of the 'link_quality' field.
   * @param value the value to set.
   */
  public void setLinkQuality(int value) {
    this.link_quality = value;
  }

  /**
   * Gets the value of the 'motion' field.
   * @return The value of the 'motion' field.
   */
  public boolean getMotion() {
    return motion;
  }


  /**
   * Sets the value of the 'motion' field.
   * @param value the value to set.
   */
  public void setMotion(boolean value) {
    this.motion = value;
  }

  /**
   * Gets the value of the 'voltage' field.
   * @return The value of the 'voltage' field.
   */
  public int getVoltage() {
    return voltage;
  }


  /**
   * Sets the value of the 'voltage' field.
   * @param value the value to set.
   */
  public void setVoltage(int value) {
    this.voltage = value;
  }

  /**
   * Creates a new MotionSensorAvro RecordBuilder.
   * @return A new MotionSensorAvro RecordBuilder
   */
  public static ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder newBuilder() {
    return new ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder();
  }

  /**
   * Creates a new MotionSensorAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MotionSensorAvro RecordBuilder
   */
  public static ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder newBuilder(ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder other) {
    if (other == null) {
      return new ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder();
    } else {
      return new ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder(other);
    }
  }

  /**
   * Creates a new MotionSensorAvro RecordBuilder by copying an existing MotionSensorAvro instance.
   * @param other The existing instance to copy.
   * @return A new MotionSensorAvro RecordBuilder
   */
  public static ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder newBuilder(ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro other) {
    if (other == null) {
      return new ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder();
    } else {
      return new ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for MotionSensorAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MotionSensorAvro>
    implements org.apache.avro.data.RecordBuilder<MotionSensorAvro> {

    private int link_quality;
    private boolean motion;
    private int voltage;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.link_quality)) {
        this.link_quality = data().deepCopy(fields()[0].schema(), other.link_quality);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.motion)) {
        this.motion = data().deepCopy(fields()[1].schema(), other.motion);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.voltage)) {
        this.voltage = data().deepCopy(fields()[2].schema(), other.voltage);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing MotionSensorAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.link_quality)) {
        this.link_quality = data().deepCopy(fields()[0].schema(), other.link_quality);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.motion)) {
        this.motion = data().deepCopy(fields()[1].schema(), other.motion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.voltage)) {
        this.voltage = data().deepCopy(fields()[2].schema(), other.voltage);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'link_quality' field.
      * @return The value.
      */
    public int getLinkQuality() {
      return link_quality;
    }


    /**
      * Sets the value of the 'link_quality' field.
      * @param value The value of 'link_quality'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder setLinkQuality(int value) {
      validate(fields()[0], value);
      this.link_quality = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'link_quality' field has been set.
      * @return True if the 'link_quality' field has been set, false otherwise.
      */
    public boolean hasLinkQuality() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'link_quality' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder clearLinkQuality() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'motion' field.
      * @return The value.
      */
    public boolean getMotion() {
      return motion;
    }


    /**
      * Sets the value of the 'motion' field.
      * @param value The value of 'motion'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder setMotion(boolean value) {
      validate(fields()[1], value);
      this.motion = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'motion' field has been set.
      * @return True if the 'motion' field has been set, false otherwise.
      */
    public boolean hasMotion() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'motion' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder clearMotion() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'voltage' field.
      * @return The value.
      */
    public int getVoltage() {
      return voltage;
    }


    /**
      * Sets the value of the 'voltage' field.
      * @param value The value of 'voltage'.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder setVoltage(int value) {
      validate(fields()[2], value);
      this.voltage = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'voltage' field has been set.
      * @return True if the 'voltage' field has been set, false otherwise.
      */
    public boolean hasVoltage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'voltage' field.
      * @return This builder.
      */
    public ru.yandex.practicum.kafka.telemetry.event.MotionSensorAvro.Builder clearVoltage() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MotionSensorAvro build() {
      try {
        MotionSensorAvro record = new MotionSensorAvro();
        record.link_quality = fieldSetFlags()[0] ? this.link_quality : (java.lang.Integer) defaultValue(fields()[0]);
        record.motion = fieldSetFlags()[1] ? this.motion : (java.lang.Boolean) defaultValue(fields()[1]);
        record.voltage = fieldSetFlags()[2] ? this.voltage : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MotionSensorAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<MotionSensorAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MotionSensorAvro>
    READER$ = (org.apache.avro.io.DatumReader<MotionSensorAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.link_quality);

    out.writeBoolean(this.motion);

    out.writeInt(this.voltage);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.link_quality = in.readInt();

      this.motion = in.readBoolean();

      this.voltage = in.readInt();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.link_quality = in.readInt();
          break;

        case 1:
          this.motion = in.readBoolean();
          break;

        case 2:
          this.voltage = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










